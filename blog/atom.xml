<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Regiondavid&#39;s Blog</title>
  <subtitle>something about code , life and thought</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://regiondavid.github.io/blog/"/>
  <updated>2016-10-19T08:51:40.160Z</updated>
  <id>http://regiondavid.github.io/blog/</id>
  
  <author>
    <name>Region David</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>策略模式学习笔记</title>
    <link href="http://regiondavid.github.io/blog/2016/10/19/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://regiondavid.github.io/blog/2016/10/19/策略模式/</id>
    <published>2016-10-18T16:00:00.000Z</published>
    <updated>2016-10-19T08:51:40.160Z</updated>
    
    <content type="html"><![CDATA[<p>策略模式学习笔记<br><a id="more"></a></p>
<h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><blockquote>
<p>定义一系列算法，把它们一个个封装起来，并且使它们可以互相替换。</p>
</blockquote>
<p>将不变的和变的隔离开</p>
<ul>
<li><p>一个传统的demo</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> performanceS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">performanceS.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</div><div class="line">true<span class="keyword">return</span> salary*<span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> performanceA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">performanceA.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</div><div class="line">true<span class="keyword">return</span> salary*<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> performanceB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">performanceB.prototype.calculate = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</div><div class="line">true<span class="keyword">return</span> salary*<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Bonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">true<span class="keyword">this</span>.salary = <span class="literal">null</span>;</div><div class="line">true<span class="keyword">this</span>.strategy = <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line">Bonus.prototype.setSalary = <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</div><div class="line">true<span class="keyword">this</span>.salary = salary;</div><div class="line">&#125;</div><div class="line">Bonus.prototype.setStrategy = <span class="function"><span class="keyword">function</span>(<span class="params">strategy</span>)</span>&#123;</div><div class="line">true<span class="keyword">this</span>.strategy = strategy;</div><div class="line">&#125;</div><div class="line">Bonus.prototype.getBonus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">true<span class="keyword">return</span> <span class="keyword">this</span>.strategy.calculate(<span class="keyword">this</span>.salary);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>一个js版的demo</p>
<blockquote>
<p>因为js中函数也是对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> strategies = &#123;</div><div class="line">true<span class="string">"S"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">return</span> salary*<span class="number">4</span>;</div><div class="line">true&#125;,</div><div class="line">true<span class="string">"A"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">return</span> salary*<span class="number">2</span>;</div><div class="line">true&#125;,</div><div class="line">true<span class="string">"B"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">return</span> salary*<span class="number">1</span>;</div><div class="line">true&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> caculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">level,salary</span>)</span>&#123;</div><div class="line">true<span class="keyword">return</span> strategies[level](salary);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>策略模式在动画中的运用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//计算小球当前的位置</span></div><div class="line"><span class="keyword">var</span> tween = &#123;</div><div class="line">true<span class="comment">//t:已消耗时间</span></div><div class="line">true<span class="comment">//b:初始位置</span></div><div class="line">true<span class="comment">//c:目标位置</span></div><div class="line">true<span class="comment">//d:持续时间</span></div><div class="line">truelinear: <span class="function"><span class="keyword">function</span>(<span class="params">t,b,c,d</span>)</span>&#123;</div><div class="line">truetrueretrun c*t/d+b;</div><div class="line">true&#125;,</div><div class="line">trueeaseIn: <span class="function"><span class="keyword">function</span>(<span class="params">t,b,c,d</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">return</span> c*(t/=d)*t+b;</div><div class="line">true&#125;,</div><div class="line">truestrongEaseIn: <span class="function"><span class="keyword">function</span>(<span class="params">t,b,c,d</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">return</span> c*(t/=d)*t*t*t*t+b;</div><div class="line">true&#125;,</div><div class="line">truestrongEaseOut: <span class="function"><span class="keyword">function</span>(<span class="params">t,b,c,d</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">return</span> c*((t=t/d<span class="number">-1</span>)*t*t*t*t+<span class="number">1</span>)+b;</div><div class="line">true&#125;，</div><div class="line">truesineaseIn:  <span class="function"><span class="keyword">function</span>(<span class="params">t,b,c,d</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">return</span> c*(t/=d)*t*t+b;</div><div class="line">true&#125;,</div><div class="line">truesineaseOut: <span class="function"><span class="keyword">function</span>(<span class="params">t,b,c,d</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">return</span> c*((t=t/d<span class="number">-1</span>)*t*t+<span class="number">1</span>)+b;</div><div class="line">true&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">true<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:absolute;background:blue"</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>这是测试动画div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Amimate = <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>)</span>&#123;</div><div class="line">true<span class="keyword">this</span>.dom = dom;			<span class="comment">//进行运动的dom节点</span></div><div class="line">true<span class="keyword">this</span>.startTime = <span class="number">0</span>;			<span class="comment">//动画开始时间</span></div><div class="line">true<span class="keyword">this</span>.startPos = <span class="number">0</span>;			<span class="comment">//动画开始时，dom节点的位置，即dom的初始位置</span></div><div class="line">true<span class="keyword">this</span>.endPos = <span class="number">0</span>;			<span class="comment">//动画结束时，dom节点的位置，即dom的目标位置</span></div><div class="line">true<span class="keyword">this</span>.propertyName = <span class="literal">null</span>;	<span class="comment">//dom节点需要被改变的css属性名</span></div><div class="line">true<span class="keyword">this</span>.easing = <span class="literal">null</span>;			<span class="comment">//缓动算法 </span></div><div class="line">true<span class="keyword">this</span>.duration = <span class="literal">null</span>;		<span class="comment">//动画持续时间</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Anitmate.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params">propertyName,endPos,duration,easing</span>)</span>&#123;</div><div class="line">true<span class="keyword">this</span>.startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">true<span class="keyword">this</span>.startPos = <span class="keyword">this</span>.dom.getBoundingClientRect()[propertyName];</div><div class="line">true<span class="keyword">this</span>.endPos = endPos;</div><div class="line">true<span class="keyword">this</span>.duration = duration;</div><div class="line">true<span class="keyword">this</span>.easing = tween[easing];</div><div class="line"></div><div class="line">true<span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">true<span class="keyword">var</span> timeId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">if</span>(self.step() === <span class="literal">false</span>)&#123;</div><div class="line">truetruetrueclearInterval(timeId);</div><div class="line">truetrue&#125;</div><div class="line">true&#125;,<span class="number">19</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Animate.prototype.step = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">true<span class="keyword">var</span> t = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">true<span class="keyword">if</span>(t&gt;=<span class="keyword">this</span>.startTime + <span class="keyword">this</span>.duration)&#123;</div><div class="line">truetrue<span class="keyword">this</span>.update(<span class="keyword">this</span>.endPos);</div><div class="line">truetrue<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">true&#125;</div><div class="line">true<span class="keyword">var</span> pos = <span class="keyword">this</span>.easing(t-<span class="keyword">this</span>.startTime,<span class="keyword">this</span>.startPos,<span class="keyword">this</span>.endPos - <span class="keyword">this</span>.startPos,<span class="keyword">this</span>.duration);</div><div class="line">true<span class="keyword">this</span>.update(pos);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Aniamte.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params">pos</span>)</span>&#123;</div><div class="line">true<span class="keyword">this</span>.dom.style[<span class="keyword">this</span>.propertyName] = pos+<span class="string">'px'</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们通常会把算法的含义扩散开来，使策略模式也可以用来封装一系列的“业务规则”。只要这些业务规则指向目标一致，并且可以被替换使用，我们就可以用策略模式来封装它们。</p>
</blockquote>
<ul>
<li><p>使用策略模式检验表单</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> strategies = &#123;</div><div class="line">trueisNonEmpty: <span class="function"><span class="keyword">function</span>(<span class="params">value,errorMsg</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">if</span>(value === <span class="string">''</span>)&#123;</div><div class="line">truetruetrue<span class="keyword">return</span> errorMsg;</div><div class="line">truetrue&#125;</div><div class="line">true&#125;,</div><div class="line">trueminLength: <span class="function"><span class="keyword">function</span>(<span class="params">value,length,errorMsg</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">if</span>(value.length &lt; length)&#123;</div><div class="line">truetruetrue<span class="keyword">return</span> errorMsg;</div><div class="line">truetrue&#125;</div><div class="line">true&#125;,</div><div class="line">trueisMobile: <span class="function"><span class="keyword">function</span>(<span class="params">value,errorMsg</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">if</span>(!<span class="regexp">/(^1[3|5|8|9][0-9]&#123;9&#125;$)/</span>).test(value)&#123;</div><div class="line">truetruetrue<span class="keyword">return</span> errorMsg;</div><div class="line">truetrue&#125;</div><div class="line">true&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建一个validator类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Validator</span>(<span class="params"></span>)</span>&#123;</div><div class="line">true<span class="keyword">this</span>.cache = [];</div><div class="line">&#125;</div><div class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">dom,rules</span>)</span>&#123;</div><div class="line">true<span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">true<span class="keyword">for</span>(vsr i = <span class="number">0</span>,rule;rule = rules[i++];)&#123;</div><div class="line">truetrue(<span class="function"><span class="keyword">function</span>(<span class="params">rule</span>)</span>&#123;</div><div class="line">truetruetrue<span class="keyword">var</span> strategyAry = rule.strategy.split(<span class="string">':'</span>);</div><div class="line">truetruetrue<span class="keyword">var</span> errorMsg = rule.errorMsg;</div><div class="line">truetruetrueself.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">truetruetruetrue<span class="keyword">var</span> strategy = strategyAry.shift();</div><div class="line">truetruetruetruestrategyAry.unshift(dom.value);</div><div class="line">truetruetruetruestrategyAry.push(errorMsg);</div><div class="line">truetruetruetrue<span class="keyword">return</span> strategied[strategy].apply(dom,strategyAry);</div><div class="line">truetruetrue&#125;);</div><div class="line">truetrue&#125;)(rule)</div><div class="line">true&#125;</div><div class="line">&#125;</div><div class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">true<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,validatorFunc;validatorFunc = <span class="keyword">this</span>.cache[i++];)&#123;</div><div class="line">truetrue<span class="keyword">var</span> msg = validatorFunc();</div><div class="line">truetrue<span class="keyword">if</span>(msg)&#123;</div><div class="line">truetruetrue<span class="keyword">return</span> msg;</div><div class="line">truetrue&#125;</div><div class="line">true&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>策略模式优缺点</p>
<ul>
<li>优点<blockquote>
<p>可以避免很多<code>if-else</code>语句；便于后期的维护和扩展；strategies可复用；</p>
</blockquote>
</li>
<li>缺点<blockquote>
<p>strategies会暴露所有的方法 </p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;策略模式学习笔记&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://regiondavid.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="设计模式" scheme="http://regiondavid.github.io/blog/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="学习笔记" scheme="http://regiondavid.github.io/blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>知识点记录</title>
    <link href="http://regiondavid.github.io/blog/2016/10/19/%E4%B8%80%E7%82%B9%E5%B0%8F%E4%B8%9C%E8%A5%BF/"/>
    <id>http://regiondavid.github.io/blog/2016/10/19/一点小东西/</id>
    <published>2016-10-18T16:00:00.000Z</published>
    <updated>2016-10-19T08:51:46.754Z</updated>
    
    <content type="html"><![CDATA[<p>记录自己平时学习过程中忽视的或者遗忘的知识点<br><a id="more"></a></p>
<h4 id="return-a-amp-amp-b"><a href="#return-a-amp-amp-b" class="headerlink" title="return a &amp;&amp; b;"></a>return a &amp;&amp; b;</h4><p>if(a){<br>    return b;<br>} else return a;</p>
<h4 id="return-a-b"><a href="#return-a-b" class="headerlink" title="return a || b;"></a>return a || b;</h4><p>if(a){<br>    return a;<br>} else return b;</p>
<blockquote>
<p>As defined in the method signature, you will have to return a boolean. Therefore, after the return keyword, you will have to provide a boolean or an expression which is evaluated to boolean</p>
<p>In your case you have the expession (subTree(t1.left, t2) || subTree(t1.right, t2)); in which the two operands will be evaluated to boolean and you will apply an logical OR on them only if the first evaluates to false. If the first operand evaluates to true the second will not be evaluated and true will be retured.</p>
</blockquote>
<p>也就是说return是要返回一个布尔值或者能够决定这个表达式布尔值的关键因素</p>
<p>参考 <a href="http://stackoverflow.com/questions/21556993/java-in-return-statements" target="_blank" rel="external">回答一</a> <a href="http://stackoverflow.com/questions/4490274/returning-with" target="_blank" rel="external">回答二</a> <a href="http://stackoverflow.com/questions/5417969/why-dont-logical-operators-and-always-return-a-boolean-result" target="_blank" rel="external">回答三</a></p>
<h4 id="String-prototype-split-str"><a href="#String-prototype-split-str" class="headerlink" title="String.prototype.split(str)"></a>String.prototype.split(str)</h4><ul>
<li>字符串中如果有指定的str字符串，就把原字符串从这个地方截断，并依次存在新数组中再返回</li>
</ul>
<p>eg:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str1 = <span class="string">"ssxs:xsfas"</span>;str1.split(<span class="string">":"</span>);<span class="comment">//["ssxs","xsfas"]</span></div></pre></td></tr></table></figure></p>
<ul>
<li>如果字符串中没有指定str字符串，就会把整个字符串存在一个新数组中再返回<br>eg:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str2 = <span class="string">"ageafaefe"</span>;</div><div class="line">str2.split(<span class="string">":"</span>);</div><div class="line"><span class="comment">//["ageafaefe"]</span></div></pre></td></tr></table></figure>
<ul>
<li>如果字符串中有不止一个指定的str字符串，那么会在每个符合str字符串的地方截断，依次拼成一个数组再返回<br>eg:<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str3 = <span class="string">"qq:ff:gg"</span>;</div><div class="line">str3.split(<span class="string">":"</span>);</div><div class="line"><span class="comment">//["qq","ff","gg"]</span></div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录自己平时学习过程中忽视的或者遗忘的知识点&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://regiondavid.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="整理记录" scheme="http://regiondavid.github.io/blog/tags/%E6%95%B4%E7%90%86%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>多种布局的探索</title>
    <link href="http://regiondavid.github.io/blog/2016/10/16/%E5%A4%9A%E7%A7%8D%E5%B8%83%E5%B1%80%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <id>http://regiondavid.github.io/blog/2016/10/16/多种布局的探索/</id>
    <published>2016-10-16T14:30:00.000Z</published>
    <updated>2016-10-18T01:33:04.203Z</updated>
    
    <content type="html"><![CDATA[<p>最近在刷IFE的三栏式布局的时候发现原来对布局的探索还不够，特此以此文章来深入探索<br><a id="more"></a></p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><a href="#1">最常规的三段式布局</a></li>
<li><a href="#2">左右固定宽度的两栏式布局</a></li>
<li><a href="#3">左或右固定宽度，另一侧自适应的布局</a></li>
<li><a href="#4">横向固定宽度的三段式布局</a></li>
<li>左右固定宽度中间自适应的布局方法<ul>
<li><a href="#5">常见布局方式</a></li>
<li><a href="#6">双飞翼布局</a></li>
<li><a href="#7">*flex布局</a></li>
</ul>
</li>
<li><a href="#8">未完待续</a></li>
</ul>
<h3 id="最常规的三段式布局"><a href="#最常规的三段式布局" class="headerlink" title="最常规的三段式布局"></a><span id="1">最常规的三段式布局</span></h3><p>三段式布局是我们平时最常见到的布局方式。如下图<br><img src="http://i1.piimg.com/1949/8d2c19cf9b7c83eb.png" alt="实例一"><br>头部、身体和尾部很生动的显示出三部分的排列方式，即从上到下依次排列，实现起来也非常简单，写出三个DIV自己就排好了。此处也就不用代码去展示了。</p>
<h3 id="左右固定宽度的两栏式布局"><a href="#左右固定宽度的两栏式布局" class="headerlink" title="左右固定宽度的两栏式布局"></a><span id="2">左右固定宽度的两栏式布局</span></h3><p>这种布局也非常常见，实现方式也有很多，我们一一来尝试。</p>
<ol>
<li><p>规定好左右的宽度后，利用float浮动来实现</p>
<p> <a href="http://codepen.io/regiondavid/pen/KrAvQQ" target="_blank" rel="external">CodePen 代码地址</a></p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">true<span class="selector-class">.box1</span>&#123;</div><div class="line">truetrue<span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">truetrue<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">truetrue<span class="attribute">float</span>: left;</div><div class="line">truetrue<span class="attribute">background-color</span>: <span class="number">#7068EB</span>;</div><div class="line">true&#125;</div><div class="line">true<span class="selector-class">.box2</span>&#123;</div><div class="line">truetrue<span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">truetrue<span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">truetrue<span class="attribute">float</span>: left;</div><div class="line">truetrue<span class="attribute">background-color</span>: <span class="number">#FF3434</span>;</div><div class="line">true&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>只浮动一个元素，将浮动元素移动到指定位置</li>
</ol>
<p>坑待填。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在刷IFE的三栏式布局的时候发现原来对布局的探索还不够，特此以此文章来深入探索&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://regiondavid.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="随笔" scheme="http://regiondavid.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="总结" scheme="http://regiondavid.github.io/blog/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="布局" scheme="http://regiondavid.github.io/blog/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://regiondavid.github.io/blog/2016/10/14/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://regiondavid.github.io/blog/2016/10/14/单例模式/</id>
    <published>2016-10-14T07:30:00.000Z</published>
    <updated>2016-10-19T08:51:57.938Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式学习笔记<br><a id="more"></a></p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p>
<blockquote>
<p>因为JavaScript本身就是无类的，既然我们只需要一个“唯一”的对象，为什么要先为它创建一个“类”呢？更加需要</p>
</blockquote>
<p>所以单例模式其实更加需要注意的是全局变量的污染。<br>常用在只需要绑定一次的代码或者只生成一个对象上，类似JQ的one</p>
<ul>
<li><p>简单demo</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">true<span class="keyword">this</span>.name = name;</div><div class="line">true<span class="keyword">this</span>.instance = <span class="literal">null</span>;</div><div class="line">&#125;;</div><div class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">true<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">true<span class="keyword">if</span>(!<span class="keyword">this</span>.instance)&#123;</div><div class="line">truetrue<span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton();</div><div class="line">true&#125;</div><div class="line">true<span class="keyword">return</span> <span class="keyword">this</span>.instance;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> a = Singleton.getInstance(<span class="string">'sven1'</span>);</div><div class="line"><span class="keyword">var</span> b = Singleton.getInstance(<span class="string">'sven2'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a===b);</div></pre></td></tr></table></figure>
</li>
<li><p>透明的单例模式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">true<span class="keyword">var</span> instance;</div><div class="line">true<span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params"> html</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">if</span>(instance) &#123;</div><div class="line">truetruetrue<span class="keyword">return</span> instance;</div><div class="line">truetrue&#125;</div><div class="line">truetrue<span class="keyword">this</span>.html = html;</div><div class="line">truetrue<span class="keyword">this</span>.init();</div><div class="line">truetrue<span class="keyword">return</span> instance = <span class="keyword">this</span>;</div><div class="line">true&#125;;</div><div class="line">trueCreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">truetruediv.innerHTML = <span class="keyword">this</span>.html;</div><div class="line">truetrue<span class="built_in">document</span>.body.appendChild(div);</div><div class="line">true&#125;;</div><div class="line">true<span class="keyword">return</span> CreateDiv;</div><div class="line">&#125;)();</div><div class="line"><span class="comment">//用闭包和IIFE封装instance</span></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> CreateDiv( <span class="string">'&lt;p&gt;222&lt;/p&gt;'</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> CreateDiv( <span class="string">'sven2'</span>);</div><div class="line"><span class="built_in">console</span>.log(a===b);</div></pre></td></tr></table></figure>
</li>
<li><p>用代理实现单例模式<br>把判断是否有instance提取出来，方便createDiv的复用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</div><div class="line">true<span class="keyword">this</span>.html = html;</div><div class="line">true<span class="keyword">this</span>.init();</div><div class="line">&#125;;</div><div class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">true<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">truediv.innerHTML = <span class="keyword">this</span>.html;</div><div class="line">true<span class="built_in">document</span>.body.appendChild(div);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> ProxySingletonCreateDiv = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">true<span class="keyword">var</span> instance;</div><div class="line">true<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">if</span>(!instance)&#123;</div><div class="line">truetruetrueinstance = <span class="keyword">new</span> CreateDiv(html);</div><div class="line">truetrue&#125;</div><div class="line">truetrue<span class="keyword">return</span> instance;</div><div class="line">true&#125;</div><div class="line">&#125;)();</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">'sven1'</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">'sven2'</span>);</div><div class="line"><span class="built_in">console</span>.log(a===b);</div></pre></td></tr></table></figure>
</li>
<li><p>惰性单例</p>
<blockquote>
<p>在需要时才创建对象实例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Singleton.getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">true<span class="keyword">var</span> instance = <span class="literal">null</span>;</div><div class="line">true<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">if</span>(!instance)&#123;</div><div class="line">truetruetrueinstance = <span class="keyword">new</span> Singleton(name);</div><div class="line">truetrue&#125;</div><div class="line">truetrue<span class="keyword">return</span> instance;</div><div class="line">true&#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<p>将上述代码中的单例判断逻辑抽离出来<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">true<span class="keyword">var</span> result;</div><div class="line">true<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">truetrue<span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>));	</div><div class="line">true&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式学习笔记&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://regiondavid.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="设计模式" scheme="http://regiondavid.github.io/blog/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="学习笔记" scheme="http://regiondavid.github.io/blog/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记</title>
    <link href="http://regiondavid.github.io/blog/2016/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://regiondavid.github.io/blog/2016/10/12/设计模式学习笔记/</id>
    <published>2016-10-12T01:30:00.000Z</published>
    <updated>2016-10-19T08:56:02.791Z</updated>
    
    <content type="html"><![CDATA[<p>跟着 《<a href="https://book.douban.com/subject/26382780/" target="_blank" rel="external">JavaScript设计模式与开发实践</a>》 一书学习设计模式<br><a id="more"></a></p>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul>
<li><a href="../../14/单例模式/">单例模式</a></li>
<li><a href="../../19/策略模式/">策略模式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟着 《&lt;a href=&quot;https://book.douban.com/subject/26382780/&quot;&gt;JavaScript设计模式与开发实践&lt;/a&gt;》 一书学习设计模式&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="http://regiondavid.github.io/blog/categories/code/"/>
    
    
      <category term="前端" scheme="http://regiondavid.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="随笔" scheme="http://regiondavid.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="note" scheme="http://regiondavid.github.io/blog/tags/note/"/>
    
      <category term="code" scheme="http://regiondavid.github.io/blog/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>盒模型的继续探索——margin属性</title>
    <link href="http://regiondavid.github.io/blog/2016/07/19/blog2/"/>
    <id>http://regiondavid.github.io/blog/2016/07/19/blog2/</id>
    <published>2016-07-19T13:41:44.000Z</published>
    <updated>2016-08-08T13:54:25.068Z</updated>
    
    <content type="html"><![CDATA[<p>上次我们了解了盒模型的基本概念，并初步尝试了一下，结果最后留下了个问题还没解决。那么今天我们就把上次的问题解决掉，顺便研究一下盒模型中的一个重要部分——margin<br><a id="more"></a></p>
<p>####先看上次的问题：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line"> 		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">true<span class="selector-id">#div1</span>&#123;</div><div class="line">           <span class="attribute">width</span>:<span class="number">500px</span>;</div><div class="line">           <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">           <span class="attribute">background-color</span>: green;</div><div class="line">       &#125;</div><div class="line">       <span class="selector-id">#div2</span>&#123;</div><div class="line">           <span class="attribute">margin-top</span>:<span class="number">50px</span>;</div><div class="line">           <span class="attribute">padding-top</span>: <span class="number">50px</span>;</div><div class="line">           <span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">           <span class="attribute">background-color</span>: blue;</div><div class="line">       &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果是这样的：<br><img src="http://i4.piimg.com/1949/f51c11a305253f94.png" alt="image1.png"><br>可以看到div2不仅没有和div1隔开50px的距离，反而div1和div2一起向下移动了50px，在上方空出了50px的空白，这是怎么回事？</p>
<p>首先让我们看看MDN上对margin属性的定义</p>
<blockquote>
<p>margin属性为给定元素设置所有四个（上下左右）方向的外边距属性。这是四个外边距属性设置的简写。四个外边距属性设置分别是： margin-top， margin-right， margin-bottom 和 margin-left 。指定的外边距允许为负数。</p>
<p>形式语法:   [ <length> | <percentage> | auto ]{1,4}</percentage></length></p>
<p>margin: style                  /<em>单值语法   </em>/  举例： margin: 1em; </p>
<p>margin: vertical horizontal    /<em>二值语法   </em>/  举例： margin: 5% auto; </p>
<p>margin: top horizontal bottom  /<em>三值语法 </em>/  举例： margin: 1em auto 2em; </p>
<p>margin: top right bottom left  /<em>四值语法  </em>/  举例： margin: 2px 1em 0 auto; </p>
<p>margin: inherit</p>
</blockquote>
<p>注意：</p>
<ul>
<li>当同时为某个元素设置4个margin属性的时候，按照上右下左的顺序，为了便于记忆可以记住是顺时针顺序</li>
<li>当某个元素的margin-left和margin-right设置为auto时，一般为水平居中，这也是我们平时最常用的水平居中方法</li>
</ul>
<p>再来看一下我们之前的那个例子，其实问题很简单，就是由于margin计算的是兄弟级的盒模型，而div2就是那一级唯一的一个盒子，所以当div2向下移动了50px的时候，div1必须紧贴着div2，所以也跟着向下移动了50px。</p>
<p>如此说来，要想出现我们所需要的效果，只需要为div2添加浮动即可。比如：<code>float:left</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#div2</span>&#123;</div><div class="line">           <span class="attribute">margin-top</span>:<span class="number">50px</span>;</div><div class="line">           <span class="attribute">padding-top</span>: <span class="number">50px</span>;</div><div class="line">           <span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">           <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">           <span class="attribute">background-color</span>: blue;</div><div class="line">        	<span class="attribute">float</span>: left;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://i1.piimg.com/1949/10abbd886ca3fedd.png" alt="image2"></p>
<h3 id="扩展：外边距塌陷"><a href="#扩展：外边距塌陷" class="headerlink" title="扩展：外边距塌陷"></a>扩展：外边距塌陷</h3><p>在MDN上有着明确的定义</p>
<blockquote>
<p>块元素的 top 与 bottom 外边距有时会合并（塌陷）为单个外边距（合并后最大的外边距），这样的现象称之为 外边距合并(塌陷)。</p>
</blockquote>
<p>下面三种基本情形会出现外边距塌陷：</p>
<ul>
<li>毗邻兄弟元素<blockquote>
<p>毗邻的兄弟元素的外边距会塌陷（当靠后的元素清除浮动时除外）</p>
</blockquote>
</li>
<li>父元素与第一个/最后一个子元素<blockquote>
<p>如果块元素的 margin-top 与它的第一个子元素的margin-top 之间没有 border、padding、inline content、 clearance 来分隔，或者块元素的 margin-bottom 与它的最后一个子元素的margin-bottom 之间没有 border、padding、inline content、height、min-height、 max-height 分隔，那么外边距会合并(塌陷)。子元素多余的外边距会被父元素的外边距截断。</p>
</blockquote>
</li>
<li>空块元素<blockquote>
<p>如果块元素的 margin-top 与 margin-bottom 之间没有 border、padding、inline content、height、min-height 来分隔，那么它的上下外边距将会合并。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>即使外边距为0，这些规则仍旧生效。因此，无论父元素的外边距是否为0，第一个或者最后一个子元素的外边距会被父元素的外边距截断(根据上面的规则)，在负外边距的情况下，合并后的外边距为最大正外边距与最小负外边距之和。</p>
<p>浮动 及 绝对定位 元素外边距不会合并。</p>
</blockquote>
<p>关于外边距塌陷，有兴趣的同学可以自己尝试一下。</p>
<h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin" target="_blank" rel="external">margin属性</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="external">外边距合并（塌陷）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次我们了解了盒模型的基本概念，并初步尝试了一下，结果最后留下了个问题还没解决。那么今天我们就把上次的问题解决掉，顺便研究一下盒模型中的一个重要部分——margin&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://regiondavid.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>盒模型的科普及一点小探索</title>
    <link href="http://regiondavid.github.io/blog/2016/07/13/blog1/"/>
    <id>http://regiondavid.github.io/blog/2016/07/13/blog1/</id>
    <published>2016-07-13T13:41:44.000Z</published>
    <updated>2016-07-30T14:09:42.054Z</updated>
    
    <content type="html"><![CDATA[<p>盒模型的科普及一点小探索<br><a id="more"></a></p>
<h3 id="什么是盒模型？"><a href="#什么是盒模型？" class="headerlink" title="什么是盒模型？"></a>什么是盒模型？</h3><p>根据<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="external">MDN上的解释</a></p>
<blockquote>
<p>文档中的每个元素被描绘为矩形盒子。渲染引擎的目的就是判定大小，属性——比如它的颜色、背景、边框方面——及这些盒子的位置。在CSS中，这些矩形盒子用 标准盒模型 来描述。这个模型描述了一个元素所占用的空间。每一个盒子有四条边界：外边距边界margin edge, 边框边界border edge, 内边距边界padding edge 与 内容边界content edge。 </p>
</blockquote>
<p>可以看出盒模型就像它的名字那样，指的就是一个矩形盒子，但是这个盒子有外边距、内边距、边框和内容区域。如下图所示：<br><img src="http://www.w3school.com.cn/i/ct_boxmodel.gif" alt="盒模型"></p>
<p>从图可以看出，我们平时所定义的 width 和 height 都是对应的内容区域，但是当我们在布局的时候，则是依照盒模型的尺寸去进行布局。所以在最后计算的时候：<code>盒模型的宽度 = margin 的宽度 + padding 的宽度 + border 的宽度 + 内容区域的宽度</code>。<br>似乎将 padding 和 border 也计算在宽度里不大符合我们常人的思维，IE 也是这么想的。所以在 IE 下和其他浏览器下计算的尺寸是不一样的。对此，css3 提出了 box-sizing 这个属性。box-sizing 有两个可选值，一个是默认的 content-box，另一个就是 border-box。当把 box-sizing 设置为 content-box 的时候，计算尺寸就把所有的都加起来；当设置为 border-box 时，就类似IE的计算方法，将 padding 和 border 算在 width 和 height 里。掌握这些基础对页面的布局有着非常好的帮助。</p>
<h3 id="一点有趣的探索"><a href="#一点有趣的探索" class="headerlink" title="一点有趣的探索"></a>一点有趣的探索</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">true#div1&#123;</div><div class="line">truetruewidth:500px;</div><div class="line">truetruetrueheight: 300px;</div><div class="line">truetruebackground-color: green;</div><div class="line">true&#125;</div><div class="line">true#div2&#123;</div><div class="line">truetruewidth:300px;</div><div class="line">truetruetrueheight: 100px;</div><div class="line">truetruebackground-color: blue;</div><div class="line">true&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这是最初的样子<img src="http://i4.piimg.com/4851/50f5caa366cd86c5.png" alt="test1"><br>当我把css稍作修改<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#div2</span>&#123;</div><div class="line">  <span class="attribute">padding-top</span>:<span class="number">50px</span>;</div><div class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">background-color</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果变成了这个样子。。。<br><img src="http://i2.piimg.com/4851/aeeee223f73c2a76.png" alt="test2"><br><img src="http://www.18183.com/uploads/150805/41-150P51Q24Q15.jpg" alt="什么鬼">，div2咋还变长了？<br>于是我开始了探索(<del>瞎折腾</del>)<br>首先在div中添加几个字，看看content区域有没有变，内容区域果然正常<img src="http://i2.piimg.com/4851/86e535e23ba2bb32.png" alt="test3"><br>可以很明显对比看到内容区域向下移动了50px的距离，但是为什么内容的上方仍然是蓝色呢？<br>还记得我们开头的话吗？</p>
<blockquote>
<p>文档中的每个元素被描绘为矩形盒子。渲染引擎的目的就是判定大小，属性——比如它的颜色、背景、边框方面——及这些盒子的位置。</p>
</blockquote>
<p>而这里渲染的背景颜色就是基于盒模型去渲染的，它会把padding部分和content部分都去渲染上背景色。<br>那么问题又来了，如果再设置margin属性，背景色会不会也渲染上呢？<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#div2</span>&#123;</div><div class="line">  <span class="attribute">margin-top</span>:<span class="number">50px</span>;</div><div class="line">  <span class="attribute">padding-top</span>:<span class="number">50px</span>;</div><div class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">background-color</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>渲染出来的结果竟然是<img src="http://i2.piimg.com/4851/e5299204e93b1362.png" alt="test4"><br>结果div2的背景色不仅没有变化，div1上边竟然还多出一块空白的？！<br><img src="http://easyread.ph.126.net/4r1X30AHvtnDORiKVCvsHw==/7916690428175172728.jpg" alt="WTF"></p>
<p>这他喵的是咋回事？</p>
<p>预知后事如何，且听下回分解</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;盒模型的科普及一点小探索&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://regiondavid.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
</feed>
